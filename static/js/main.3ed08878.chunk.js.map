{"version":3,"sources":["Images/SmallLogo.png","Home/topHome.js","Home/secondHome.js","Resume/about.js","Resume/index.js","NavBar/index.js","Home/index.js","serviceWorker.js","index.js","Images/36401449295_e25881d153_b.jpg"],"names":["module","exports","topHome","className","src","background","secondHome","about","resumeComponents","navbar","href","path","component","Home","logo","Resume","homeComponents","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","NavBar","HomeComponents","ResumeComponents","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qHAAAA,EAAOC,QAAU,IAA0B,uC,kOCc5BC,MAVf,WACE,OACE,6BACE,yBAAKC,UAAU,aAAaC,IAAKC,MACjC,8CACA,6C,MCGSC,MARf,WACE,OACE,6BACE,yBAAKH,UAAU,aAAaC,IAAKC,Q,6BCOxBE,MAVf,WACE,OACE,6BACE,yBAAKJ,UAAU,aAAaC,IAAKC,MACjC,oCACA,6CCMSG,MATf,WACE,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,Q,cCgBSC,MAnBf,WACE,OACE,kBAAC,IAAD,KACE,yBAAKN,UAAU,UACb,uBAAGO,KAAK,cACN,kBAAC,IAAD,CAAOC,KAAM,CAAC,aAAc,qBAAsBC,UAAWC,GAC3D,yBAAKV,UAAU,YAAYC,IAAKU,QAGpC,uBAAGJ,KAAK,qBACN,kBAAC,IAAD,CAAOC,KAAM,CAAC,oBAAqB,cAAeC,UAAWG,GAC3D,yBAAKZ,UAAU,WAAf,eCHGa,MAVf,WACE,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCEcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEb,KAAM,CAAC,aAAc,qBACrBC,UAAWa,IAEb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOd,KAAK,aAAaC,UAAWc,IACpC,kBAAC,IAAD,CAAOf,KAAK,oBAAoBC,UAAWe,OAIjDC,SAASC,eAAe,SD6GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,kBEzI5BvC,EAAOC,QAAU,IAA0B,uD","file":"static/js/main.3ed08878.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/SmallLogo.952bc868.png\";","import React from 'react';\nimport './topHome.css';\nimport background from '../Images/36401449295_e25881d153_b.jpg';\n\nfunction topHome() {\n  return (\n    <div>\n      <img className='background' src={background}></img>\n      <h2>Hi! My name is</h2>\n      <h1>Alisa Chang</h1>\n    </div>\n  );\n}\n\nexport default topHome;\n","import React from 'react';\nimport './secondHome.css';\nimport background from '../Images/36401449295_e25881d153_b.jpg';\n\nfunction secondHome() {\n  return (\n    <div>\n      <img className='background' src={background}></img>\n    </div>\n  );\n}\n\nexport default secondHome;\n","import React from 'react';\nimport './about.css';\nimport background from '../Images/36401449295_e25881d153_b.jpg';\n\nfunction about() {\n  return (\n    <div>\n      <img className='background' src={background}></img>\n      <h2>Test</h2>\n      <h1>Alisa Chang</h1>\n    </div>\n  );\n}\n\nexport default about;\n","import React from 'react';\nimport About from './about';\nimport './about.css';\nimport background from '../Images/36401449295_e25881d153_b.jpg';\nimport NavBar from '../NavBar/index';\n\nfunction resumeComponents() {\n  return (\n    <div>\n      <About></About>\n      <NavBar></NavBar>\n    </div>\n  );\n}\n\nexport default resumeComponents;\n","import React from 'react';\nimport logo from '../Images/SmallLogo.png';\nimport './index.css';\nimport Home from '../Home/index';\nimport Resume from '../Resume/index';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\n\nfunction navbar() {\n  return (\n    <Router>\n      <div className='navbar'>\n        <a href='/alisa-web'>\n          <Route path={['/alisa-web', '/alisa-web/resume']} component={Home}>\n            <img className='smallLogo' src={logo}></img>\n          </Route>\n        </a>\n        <a href='/alisa-web/resume'>\n          <Route path={['/alisa-web/resume', '/alisa-web']} component={Resume}>\n            <div className='options'>Resume</div>\n          </Route>\n        </a>\n      </div>\n    </Router>\n  );\n}\n\nexport default navbar;\n","import React from 'react';\nimport TopHome from './topHome';\nimport SecondHome from './secondHome';\nimport NavBar from '../NavBar/index';\n\nfunction homeComponents() {\n  return (\n    <div>\n      <SecondHome></SecondHome>\n      <TopHome></TopHome>\n      <NavBar></NavBar>\n    </div>\n  );\n}\n\nexport default homeComponents;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport HomeComponents from './Home/index';\nimport NavBar from './NavBar/index';\nimport ResumeComponents from './Resume/index';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <Route\n        path={['/alisa-web', '/alisa-web/resume']}\n        component={NavBar}\n      ></Route>\n      <Switch>\n        <Route path='/alisa-web' component={HomeComponents}></Route>\n        <Route path='/alisa-web/resume' component={ResumeComponents}></Route>\n      </Switch>\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/36401449295_e25881d153_b.1fd5b6ab.jpg\";"],"sourceRoot":""}