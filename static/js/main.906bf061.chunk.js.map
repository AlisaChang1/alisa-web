{"version":3,"sources":["components/images/36401449295_e25881d153_b.jpg","components/images/SmallLogo.png","components/Home/styles.ts","components/Home/Home.tsx","components/NavBar/styles.ts","components/NavBar/NavBar.tsx","serviceWorker.js","index.tsx"],"names":["module","exports","Background","styled","img","Fade","keyframes","Home","h1","h2","src","background","NavBar","div","Options","a","Logo","Resume","Navbar","basename","href","path","component","logo","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","HomeComponents","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gGAAAA,EAAOC,QAAU,IAA0B,sD,mBCA3CD,EAAOC,QAAU,IAA0B,uC,ujCCEpC,IAAMC,EAAaC,IAAOC,IAAV,KAQVC,EAAOC,YAAH,KCIFC,GDKKJ,IAAOK,GAAV,IAQFH,GAMMF,IAAOM,GAAV,IAQHJ,GCrCF,WACX,OACE,6BACE,kBAACH,EAAD,CAAYQ,IAAKC,MACjB,8CACA,8C,i/BCJC,IAAMC,EAAST,IAAOU,IAAV,KAONC,EAAUX,IAAOY,EAAV,KAQPC,EAAOb,IAAOC,IAAV,KAiBJa,EAASd,IAAOU,IAAV,K,eCXJK,EAnBA,WACb,OACE,kBAAC,IAAD,CAAQC,SAAS,cACf,kBAACP,EAAD,KACE,kBAACE,EAAD,CAASM,KAAK,SACZ,kBAAC,IAAD,CAAOC,KAAM,CAAC,QAAS,WAAYC,UAAWf,GAC5C,kBAACS,EAAD,CAAMN,IAAKa,QAGf,kBAACT,EAAD,CAASM,KAAK,WACZ,kBAAC,IAAD,CAAOC,KAAM,CAAC,UAAW,SAAUC,UAAWL,GAC5C,kBAACA,EAAD,CAAQO,UAAU,WAAlB,eCNQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAQb,SAAS,cACf,kBAAC,IAAD,CAAOE,KAAM,QAASC,UAAWV,IACjC,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOS,KAAK,QAAQC,UAAWW,OAIrCC,SAASC,eAAe,SDkHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.906bf061.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/36401449295_e25881d153_b.1fd5b6ab.jpg\";","module.exports = __webpack_public_path__ + \"static/media/SmallLogo.952bc868.png\";","import styled, { keyframes } from 'styled-components';\n\nexport const Background = styled.img`\n  background-color: pink;\n  height: 100%;\n  margin-top: 0;\n  width: 100%;\n  position: fixed;\n`;\n\nexport const Fade = keyframes`\n  from {\n    color: white;\n  }\n  to {\n    color: #fa1b87;\n  }\n`;\n\nexport const Name = styled.h1`\n  left: 0;\n  line-height: 300px;\n  margin-top: -100px;\n  position: absolute;\n  text-align: center;\n  top: 48%;\n  width: 100%;\n  animation: ${Fade} 4s ease-in;\n  color: #fa1b87;\n  font-size: 100px;\n  font-family: 'Monaco';\n`;\n\nexport const Intro = styled.h2`\n  left: 0;\n  line-height: 200px;\n  margin-top: -100px;\n  position: absolute;\n  text-align: center;\n  top: 42%;\n  width: 100%;\n  animation: ${Fade} 4s ease-in;\n  color: #fa1b87;\n  font-size: 30px;\n  font-family: 'Monaco';\n`;\n","import React from 'react';\nimport background from '../images/36401449295_e25881d153_b.jpg';\nimport { Background } from './styles';\n\nconst Home = () => {\n  return (\n    <div>\n      <Background src={background}></Background>\n      <h2>Hi! My name is</h2>\n      <h1>Alisa Chang</h1>\n    </div>\n  );\n};\n\nexport default Home;\n","/*\n *   Navigation Bar\n */\nimport styled from 'styled-components';\n\nexport const NavBar = styled.div`\n  background-color: white;\n  height: 60px;\n  width: 100%;\n  position: fixed;\n`;\n\nexport const Options = styled.a`\n  float: left;\n  display: block;\n  color: black;\n  text-align: center;\n  text-decoration: none;\n  cursor: pointer;\n`;\nexport const Logo = styled.img`\n  padding: 28px 16px;\n  font-size: 20px;\n  font-family: 'Papyrus';\n  float: left;\n  display: block;\n  color: black;\n  text-align: center;\n  text-decoration: none;\n  cursor: pointer;\n  hover {\n    color: pink;\n  }\n  height: 40px;\n  width: 40px;\n  padding: 19px 16px;\n`;\nexport const Resume = styled.div`\n  padding: 28px 16px;\n  font-size: 20px;\n  font-family: 'Papyrus';\n  float: left;\n  display: block;\n  color: black;\n  text-align: center;\n  text-decoration: none;\n  cursor: pointer;\n  hover {\n    color: pink;\n  }\n`;\n","import React from 'react';\nimport logo from '../images/SmallLogo.png';\nimport './styles.ts';\nimport Home from '../Home/index';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport { NavBar, Options, Logo, Resume } from './styles';\n\nconst Navbar = () => {\n  return (\n    <Router basename='/alisa-web'>\n      <NavBar>\n        <Options href='/home'>\n          <Route path={['/home', '/resume']} component={Home}>\n            <Logo src={logo}></Logo>\n          </Route>\n        </Options>\n        <Options href='/resume'>\n          <Route path={['/resume', '/home']} component={Resume}>\n            <Resume className='options'>Resume</Resume>\n          </Route>\n        </Options>\n      </NavBar>\n    </Router>\n  );\n};\n\nexport default Navbar;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport HomeComponents from './components/Home/index';\nimport NavBar from './components/NavBar/NavBar';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router basename='/alisa-web'>\n      <Route path={'/home'} component={NavBar}></Route>\n      <Switch>\n        <Route path='/home' component={HomeComponents}></Route>\n      </Switch>\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}